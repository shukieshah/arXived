{"ast":null,"code":"import _regeneratorRuntime from\"/Users/shukan/Google Drive/Personal Projects/arXived/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/shukan/Google Drive/Personal Projects/arXived/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/shukan/Google Drive/Personal Projects/arXived/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{ClipLoader}from'react-spinners';import{Helmet}from'react-helmet';import{CSVLink}from'react-csv';import Entry from'./Entry.js';import'./App.css';var App=function App(){// Manage state variables via React Hooks\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),entries=_useState2[0],setEntries=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),topicInput=_useState4[0],setTopicInput=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),limitInput=_useState6[0],setLimitInput=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),startDateInput=_useState8[0],setStartDateInput=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),endDateInput=_useState10[0],setEndDateInput=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),showResults=_useState12[0],setShowResults=_useState12[1];// Constants\nvar MAX_TOP_MATCHES=20;var STEP_SIZE=500;var MAX_RESULT_LIMIT=1000;// Default Setting\nvar _useState13=useState({topic:'Machine Learning',limit:'10',startDate:startDateInput,endDate:endDateInput}),_useState14=_slicedToArray(_useState13,2),query=_useState14[0],setQuery=_useState14[1];useEffect(function(){scrapeArXiv();},[query]);var sleep=function sleep(ms){return new Promise(function(resolve){return setTimeout(resolve,ms);});};// Use the arXiv HTTP API to scrape records based on query parameters\nvar scrapeArXiv=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var start,response,responseString,results,startDate,endDate,publishDateString,publishDate,previousResults,retries,filtered,i;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:start=0;_context.next=3;return fetch(\"http://export.arxiv.org/api/query?search_query=all:\\\"\".concat(query.topic,\"\\\"&sortBy=submittedDate&sortOrder=descending&start=\").concat(start,\"&max_results=\").concat(query.limit));case 3:response=_context.sent;_context.next=6;return response.text();case 6:responseString=_context.sent;// Parse the entries from the XML response as DOM elements and store them in a results array\nresults=Array.prototype.slice.call(new window.DOMParser().parseFromString(responseString,\"text/xml\").querySelectorAll('entry'));// Continue scraping past records if a date range is specified\nif(!(results.length>0&&query.startDate.trim()&&query.endDate.trim())){_context.next=51;break;}startDate=new Date(query.startDate.trim()).getTime();endDate=new Date(query.endDate.trim()).getTime();publishDateString=results[results.length-1].querySelector('published').textContent.trim();publishDate=new Date(publishDateString).getTime();previousResults=[];// Paginate through sets of old records until the earliest date in the record set falls within the date range\ncase 14:if(!(results.length>0&&publishDate>startDate)){_context.next=45;break;}console.log(\"Scraping from \"+new Date(publishDateString).toDateString());// Start index used for pagination \nstart=start+results.length;previousResults=results;_context.next=20;return fetch(\"http://export.arxiv.org/api/query?search_query=all:\\\"\".concat(query.topic,\"\\\"&sortBy=submittedDate&sortOrder=descending&start=\").concat(start,\"&max_results=\").concat(STEP_SIZE));case 20:response=_context.sent;_context.next=23;return response.text();case 23:responseString=_context.sent;results=Array.prototype.slice.call(new window.DOMParser().parseFromString(responseString,\"text/xml\").querySelectorAll('entry'));// Retry API request up to 5 times if no data is returned\nretries=0;case 26:if(!(retries<5&&results.length==0)){_context.next=40;break;}console.log('Request failed, retrying API request '+(retries+1)+' times');_context.next=30;return fetch(\"http://export.arxiv.org/api/query?search_query=all:\\\"\".concat(query.topic,\"\\\"&sortBy=submittedDate&sortOrder=descending&start=\").concat(start,\"&max_results=\").concat(STEP_SIZE));case 30:response=_context.sent;_context.next=33;return response.text();case 33:responseString=_context.sent;results=Array.prototype.slice.call(new window.DOMParser().parseFromString(responseString,\"text/xml\").querySelectorAll('entry'));retries+=1;_context.next=38;return sleep(5000);case 38:_context.next=26;break;case 40:if(results.length>0){publishDateString=results[results.length-1].querySelector('published').textContent.trim();publishDate=new Date(publishDateString).getTime();}// Sleep for 2 seconds to limit amount of queries\n_context.next=43;return sleep(2000);case 43:_context.next=14;break;case 45:results=previousResults.concat(results);results=results.reverse();filtered=[];i=0;// Filter the results to match the given date range\nwhile(i<results.length&&publishDate<=endDate){publishDateString=results[i].querySelector('published').textContent.trim();publishDate=new Date(publishDateString).getTime();if(publishDate>=startDate&&filtered.length<query.limit){filtered.push(results[i]);}i+=1;}results=filtered;case 51:parseData(results);case 52:case\"end\":return _context.stop();}}},_callee);}));return function scrapeArXiv(){return _ref.apply(this,arguments);};}();// Take the DOM results array and parse the data for each relevant field\nvar parseData=function parseData(results){var data=[];for(var i=0;i<results.length;i++){var metadata={};metadata['title']=results[i].querySelector('title').textContent.trim().replace(/\"/g,'\\'');var rawDate=results[i].querySelector('published').textContent.trim().replace(/\"/g,'\\'');;metadata['published']=new Date(rawDate).toDateString();var authors=results[i].querySelectorAll('author');var names=[];for(var j=0;j<authors.length;j++){names.push(authors[j].textContent.trim());}metadata['authors']=names.join(', ').replace(/\"/g,'\\'');metadata['summary']=results[i].querySelector('summary').textContent.trim().replace(/\"/g,'\\'');metadata['link']=results[i].querySelectorAll('link')[1].getAttribute('href').trim().replace(/\"/g,'\\'');data.push(metadata);}console.log('Scraped '+data.length+' entries');setEntries(data);setShowResults(true);};var updateTopic=function updateTopic(e){setTopicInput(e.target.value);};var updateLimit=function updateLimit(e){setLimitInput(e.target.value);};var updateStartDate=function updateStartDate(e){setStartDateInput(e.target.value);};var updateEndDate=function updateEndDate(e){setEndDateInput(e.target.value);};var clearInput=function clearInput(){setTopicInput('');setLimitInput('');setStartDateInput('');setEndDateInput('');};var isValidInput=function isValidInput(){if(!topicInput.trim()){alert(\"Please enter a topic\");return false;}if(!limitInput.trim()||isNaN(limitInput.trim())||parseInt(limitInput.trim(),10)<=0){alert(\"Please enter a valid limit for the number of results (MAX \"+MAX_RESULT_LIMIT+\")\");return false;}if(startDateInput.trim()||endDateInput.trim()){if(!endDateInput.trim()){alert(\"Please enter an end date range\");return false;}else if(!startDateInput.trim()){alert(\"Please enter a start date range\");return false;}else if(new Date(startDateInput.trim())=='Invalid Date'){alert(\"Please enter a valid start date (Ex: 1/01/2019)\");return false;}else if(new Date(endDateInput.trim())=='Invalid Date'){alert(\"Please enter a valid end date (Ex: 5/01/2020)\");return false;}else if(new Date(startDateInput.trim()).getTime()>=new Date(endDateInput.trim()).getTime()){alert(\"Make sure the start date range is earlier than the end date range\");return false;}}return true;};var submitForm=function submitForm(e){e.preventDefault();if(isValidInput()){setShowResults(false);setQuery({topic:topicInput.trim(),limit:Math.min(MAX_RESULT_LIMIT,parseInt(limitInput.trim(),10)),startDate:startDateInput.trim(),endDate:endDateInput.trim()});}clearInput();};return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(Helmet,null,/*#__PURE__*/React.createElement(\"title\",null,\"arXived\")),/*#__PURE__*/React.createElement(\"header\",{className:\"App-header\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"App-title\"},\"arXived\")),/*#__PURE__*/React.createElement(\"form\",{onSubmit:submitForm,className:\"input-form\"},/*#__PURE__*/React.createElement(\"input\",{className:\"topic-search-bar\",type:\"text\",placeholder:\"Enter a topic or author of interest\",value:topicInput,onChange:updateTopic}),/*#__PURE__*/React.createElement(\"input\",{className:\"limit-input-bar\",type:\"text\",placeholder:\"Result Limit (MAX \"+MAX_RESULT_LIMIT+\")\",value:limitInput,onChange:updateLimit}),/*#__PURE__*/React.createElement(\"input\",{className:\"date-input-bar\",type:\"text\",placeholder:\"1/01/2020 (Optional Start Date)\",value:startDateInput,onChange:updateStartDate}),/*#__PURE__*/React.createElement(\"input\",{className:\"date-input-bar\",type:\"text\",placeholder:\"5/01/2020 (Optional End Date)\",value:endDateInput,onChange:updateEndDate}),/*#__PURE__*/React.createElement(\"button\",{className:\"submit-button\",type:\"submit\"},\"Scrape arXiv\")),/*#__PURE__*/React.createElement(\"div\",{className:\"entries\"},showResults?/*#__PURE__*/React.createElement(\"div\",{style:{'textAlign':'center'}},/*#__PURE__*/React.createElement(\"h2\",null,\"Top matches for \\\"\",query.topic,\"\\\"\"),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(CSVLink,{data:entries,filename:\"arxiv_data.csv\",target:\"_blank\"},\"Download as CSV\"),\" for all \",entries.length,\" results.\")):/*#__PURE__*/React.createElement(\"div\",{style:{'textAlign':'center'}},/*#__PURE__*/React.createElement(\"h2\",null,\"Scraping information...\"),/*#__PURE__*/React.createElement(\"p\",null,\"If you chose a date range in the distant past, this may take several minutes...\"),/*#__PURE__*/React.createElement(\"p\",null,\"Try recent date ranges or omitting the range altogether for faster, more reliable queries.\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(ClipLoader,{size:100,color:\"#123abc\"}),/*#__PURE__*/React.createElement(\"br\",null)),showResults?entries.slice(0,Math.min(MAX_TOP_MATCHES,entries.length)).map(function(data,i){return/*#__PURE__*/React.createElement(Entry,{key:i,data:data});}):null));};export default App;","map":{"version":3,"sources":["/Users/shukan/Google Drive/Personal Projects/arXived/src/App.js"],"names":["React","useEffect","useState","ClipLoader","Helmet","CSVLink","Entry","App","entries","setEntries","topicInput","setTopicInput","limitInput","setLimitInput","startDateInput","setStartDateInput","endDateInput","setEndDateInput","showResults","setShowResults","MAX_TOP_MATCHES","STEP_SIZE","MAX_RESULT_LIMIT","topic","limit","startDate","endDate","query","setQuery","scrapeArXiv","sleep","ms","Promise","resolve","setTimeout","start","fetch","response","text","responseString","results","Array","prototype","slice","call","window","DOMParser","parseFromString","querySelectorAll","length","trim","Date","getTime","publishDateString","querySelector","textContent","publishDate","previousResults","console","log","toDateString","retries","concat","reverse","filtered","i","push","parseData","data","metadata","replace","rawDate","authors","names","j","join","getAttribute","updateTopic","e","target","value","updateLimit","updateStartDate","updateEndDate","clearInput","isValidInput","alert","isNaN","parseInt","submitForm","preventDefault","Math","min","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Helmet } from 'react-helmet';\nimport { CSVLink } from 'react-csv';\nimport Entry from './Entry.js';\nimport './App.css';\n\nconst App = () => {\n\n  // Manage state variables via React Hooks\n  const [entries, setEntries] = useState([]);\n  const [topicInput, setTopicInput] = useState('');\n  const [limitInput, setLimitInput] = useState('');\n  const [startDateInput, setStartDateInput] = useState('');\n  const [endDateInput, setEndDateInput] = useState('');\n  const [showResults, setShowResults] = useState(false);\n\n  // Constants\n  const MAX_TOP_MATCHES = 20;\n  const STEP_SIZE = 500;\n  const MAX_RESULT_LIMIT = 1000;\n\n  // Default Setting\n  const [query, setQuery] = useState({\n    topic: 'Machine Learning',\n    limit: '10',\n    startDate: startDateInput,\n    endDate: endDateInput\n  });\n\n  useEffect(() => {\n    scrapeArXiv();\n  }, [query]);\n\n  const sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n\n  // Use the arXiv HTTP API to scrape records based on query parameters\n  const scrapeArXiv = async () => {\n\n    var start = 0;\n    var response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&start=${start}&max_results=${query.limit}`);\n    var responseString = await response.text();\n\n    // Parse the entries from the XML response as DOM elements and store them in a results array\n    var results = Array.prototype.slice.call((new window.DOMParser()).parseFromString(responseString, \"text/xml\").querySelectorAll('entry'));\n\n    // Continue scraping past records if a date range is specified\n    if (results.length > 0 && query.startDate.trim() && query.endDate.trim()) {\n\n      var startDate = new Date(query.startDate.trim()).getTime();\n      var endDate = new Date(query.endDate.trim()).getTime();\n      var publishDateString = results[results.length - 1].querySelector('published').textContent.trim();\n      var publishDate = new Date(publishDateString).getTime();\n      var previousResults = [];\n\n      // Paginate through sets of old records until the earliest date in the record set falls within the date range\n      while (results.length > 0 && publishDate > startDate) {\n\n        console.log(\"Scraping from \" + new Date(publishDateString).toDateString());\n\n        // Start index used for pagination \n        start = start + results.length;\n        previousResults = results;\n        response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&start=${start}&max_results=${STEP_SIZE}`);\n        responseString = await response.text();\n        results = Array.prototype.slice.call((new window.DOMParser()).parseFromString(responseString, \"text/xml\").querySelectorAll('entry'));\n\n\n        // Retry API request up to 5 times if no data is returned\n        var retries = 0;\n        while (retries < 5 && results.length == 0) {\n          console.log('Request failed, retrying API request ' + (retries + 1) + ' times');\n          response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&start=${start}&max_results=${STEP_SIZE}`);\n          responseString = await response.text();\n          results = Array.prototype.slice.call((new window.DOMParser()).parseFromString(responseString, \"text/xml\").querySelectorAll('entry'));\n\n          retries += 1;\n          await sleep(5000);\n        }\n\n        if (results.length > 0) {\n          publishDateString = results[results.length - 1].querySelector('published').textContent.trim();\n          publishDate = new Date(publishDateString).getTime();\n        }\n\n        // Sleep for 2 seconds to limit amount of queries\n        await sleep(2000);\n      }\n\n      results = previousResults.concat(results);\n      results = results.reverse();\n      var filtered = [];\n      var i = 0;\n\n      // Filter the results to match the given date range\n      while (i < results.length && publishDate <= endDate) {\n        publishDateString = results[i].querySelector('published').textContent.trim();\n        publishDate = new Date(publishDateString).getTime();\n\n        if (publishDate >= startDate && filtered.length < query.limit) {\n          filtered.push(results[i]);\n        }\n        i += 1;\n      }\n      results = filtered;\n    }\n    parseData(results);\n  }\n\n  // Take the DOM results array and parse the data for each relevant field\n  const parseData = (results) => {\n\n    var data = []\n    for (var i = 0; i < results.length; i++) {\n      var metadata = {}\n\n      metadata['title'] = results[i].querySelector('title').textContent.trim().replace(/\"/g, '\\'');\n      const rawDate = results[i].querySelector('published').textContent.trim().replace(/\"/g, '\\'');;\n      metadata['published'] = new Date(rawDate).toDateString();\n\n      const authors = results[i].querySelectorAll('author');\n      var names = [];\n      for (var j = 0; j < authors.length; j++) {\n        names.push(authors[j].textContent.trim());\n      }\n\n      metadata['authors'] = names.join(', ').replace(/\"/g, '\\'');\n      metadata['summary'] = results[i].querySelector('summary').textContent.trim().replace(/\"/g, '\\'');\n      metadata['link'] = results[i].querySelectorAll('link')[1].getAttribute('href').trim().replace(/\"/g, '\\'');\n      data.push(metadata);\n    }\n\n    console.log('Scraped ' + data.length + ' entries');\n    setEntries(data);\n    setShowResults(true);\n  }\n\n\n  const updateTopic = e => {\n    setTopicInput(e.target.value);\n  }\n\n  const updateLimit = e => {\n    setLimitInput(e.target.value);\n  }\n\n  const updateStartDate = e => {\n    setStartDateInput(e.target.value);\n  }\n\n  const updateEndDate = e => {\n    setEndDateInput(e.target.value);\n  }\n\n  const clearInput = () => {\n    setTopicInput('');\n    setLimitInput('');\n    setStartDateInput('');\n    setEndDateInput('');\n  }\n\n  const isValidInput = () => {\n    if (!topicInput.trim()) {\n      alert(\"Please enter a topic\");\n      return false;\n    }\n\n    if (!limitInput.trim() || isNaN(limitInput.trim()) || parseInt(limitInput.trim(), 10) <= 0) {\n      alert(\"Please enter a valid limit for the number of results (MAX \" + MAX_RESULT_LIMIT + \")\");\n      return false;\n    }\n\n    if (startDateInput.trim() || endDateInput.trim()) {\n      if (!endDateInput.trim()) {\n        alert(\"Please enter an end date range\");\n        return false;\n      } else if (!startDateInput.trim()) {\n        alert(\"Please enter a start date range\");\n        return false;\n      } else if (new Date(startDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid start date (Ex: 1/01/2019)\");\n        return false;\n      } else if (new Date(endDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid end date (Ex: 5/01/2020)\");\n        return false;\n      } else if (new Date(startDateInput.trim()).getTime() >= new Date(endDateInput.trim()).getTime()) {\n        alert(\"Make sure the start date range is earlier than the end date range\");\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  const submitForm = e => {\n    e.preventDefault();\n    if (isValidInput()) {\n      setShowResults(false);\n      setQuery({\n        topic: topicInput.trim(),\n        limit: Math.min(MAX_RESULT_LIMIT, parseInt(limitInput.trim(), 10)),\n        startDate: startDateInput.trim(),\n        endDate: endDateInput.trim()\n      });\n    }\n    clearInput();\n  }\n\n  return (\n    <div className='App'>\n      <Helmet>\n        <title>{\"arXived\"}</title>\n      </Helmet>\n\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">arXived</h1>\n      </header>\n\n      <form onSubmit={submitForm} className=\"input-form\" >\n        <input className=\"topic-search-bar\" type=\"text\" placeholder=\"Enter a topic or author of interest\"\n          value={topicInput} onChange={updateTopic} />\n        <input className=\"limit-input-bar\" type=\"text\" placeholder={\"Result Limit (MAX \" + MAX_RESULT_LIMIT + \")\"}\n          value={limitInput} onChange={updateLimit} />\n        <input className=\"date-input-bar\" type=\"text\" placeholder=\"1/01/2020 (Optional Start Date)\"\n          value={startDateInput} onChange={updateStartDate} />\n        <input className=\"date-input-bar\" type=\"text\" placeholder=\"5/01/2020 (Optional End Date)\"\n          value={endDateInput} onChange={updateEndDate} />\n        <button className=\"submit-button\" type=\"submit\">\n          Scrape arXiv\n        </button>\n      </form>\n\n      {/* Conditionally render views based on whether or not the results have been fully scraped */}\n      <div className='entries'>\n        {showResults ?\n          <div style={{ 'textAlign': 'center' }}>\n            <h2>Top matches for \"{query.topic}\"</h2>\n            <p><CSVLink data={entries} filename=\"arxiv_data.csv\" target=\"_blank\">Download as CSV</CSVLink> for all {entries.length} results.</p>\n          </div>\n          :\n          <div style={{ 'textAlign': 'center' }}>\n            <h2>Scraping information...</h2>\n            <p>If you chose a date range in the distant past, this may take several minutes...</p>\n            <p>Try recent date ranges or omitting the range altogether for faster, more reliable queries.</p>\n            <br />\n            <ClipLoader size={100} color={\"#123abc\"} />\n            <br />\n          </div>}\n        \n        {/* Show only a subset of the full data on the web page for performnance purposes */}\n        {showResults ? entries.slice(0, Math.min(MAX_TOP_MATCHES, entries.length)).map((data, i) => (\n          <Entry key={i} data={data} />\n        )) : null}\n\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}