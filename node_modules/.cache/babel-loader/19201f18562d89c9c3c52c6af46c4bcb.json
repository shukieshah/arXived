{"ast":null,"code":"var _jsxFileName = \"/Users/shukan/Google Drive/Personal Projects/arxived/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Helmet } from 'react-helmet';\nimport { CSVLink } from 'react-csv';\nimport Entry from './Entry.js';\nimport './App.css';\n\nconst App = () => {\n  const [entries, setEntries] = useState([]);\n  const [topicInput, setTopicInput] = useState('');\n  const [limitInput, setLimitInput] = useState('');\n  const [startDateInput, setStartDateInput] = useState('');\n  const [endDateInput, setEndDateInput] = useState('');\n  const [showResults, setShowResults] = useState(false);\n  const MAX_TOP_MATCHES = 20;\n  const MAX_RESULT_LIMIT = 1000;\n  const [query, setQuery] = useState({\n    topic: 'Shukan Shah',\n    limit: '10',\n    startDate: startDateInput,\n    endDate: endDateInput\n  });\n  useEffect(() => {\n    scrapeArXiv();\n  }, [query]);\n\n  const sleep = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  const scrapeArXiv = async () => {\n    var start = 0;\n    var response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&start=${start}&max_results=${query.limit}`);\n    var responseString = await response.text();\n    var results = new window.DOMParser().parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n\n    if (query.startDate.trim() && query.endDate.trim()) {\n      var startDate = new Date(query.startDate.trim()).getTime();\n      var endDate = new Date(query.endDate.trim()).getTime();\n      var publishDateString = results[results.length - 1].querySelector('published').textContent.trim();\n      var publishDate = new Date(publishDateString).getTime();\n      var previousResults = []; // Pagination for better performance\n\n      while (publishDate > startDate) {\n        console.log(new Date(publishDateString).toDateString());\n        start = start + MAX_RESULT_LIMIT;\n        previousResults = results;\n        response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&start=${start}&max_results=${100}`);\n        responseString = await response.text();\n        results = new window.DOMParser().parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n        publishDateString = results[results.length - 1].querySelector('published').textContent.trim();\n        publishDate = new Date(publishDateString).getTime(); // Sleep for 4 seconds to avoid querying too many times at once \n\n        await sleep(1000);\n      }\n\n      results = results.concat(previousResults);\n      var filtered = [];\n      var i = 0;\n\n      while (filtered.length <= query.limit && publishDate <= endDate) {\n        if (publishDate >= startDate) {\n          filtered.push(results[i]);\n        }\n\n        publishDateString = results[i].querySelector('published').textContent.trim();\n        publishDate = new Date(publishDateString).getTime();\n        i += 1;\n      }\n\n      results = filtered;\n    }\n\n    var data = [];\n\n    for (var i = 0; i < results.length; i++) {\n      var metadata = {};\n      metadata['title'] = results[i].querySelector('title').textContent.trim();\n      const rawDate = results[i].querySelector('published').textContent.trim();\n      metadata['published'] = new Date(rawDate).toDateString();\n      const authors = results[i].querySelectorAll('author');\n      var names = [];\n\n      for (var j = 0; j < authors.length; j++) {\n        names.push(authors[j].textContent.trim());\n      }\n\n      metadata['authors'] = names.join(', ');\n      metadata['summary'] = results[i].querySelector('summary').textContent.trim();\n      metadata['link'] = results[i].querySelectorAll('link')[1].getAttribute('href').trim();\n      data.push(metadata);\n    }\n\n    console.log('Scraped ' + data.length + ' entries');\n    setEntries(data);\n    setShowResults(true);\n  };\n\n  const updateTopic = e => {\n    setTopicInput(e.target.value);\n  };\n\n  const updateLimit = e => {\n    setLimitInput(e.target.value);\n  };\n\n  const updateStartDate = e => {\n    setStartDateInput(e.target.value);\n  };\n\n  const updateEndDate = e => {\n    setEndDateInput(e.target.value);\n  };\n\n  const clearInput = () => {\n    setTopicInput('');\n    setLimitInput('');\n    setStartDateInput('');\n    setEndDateInput('');\n  };\n\n  const isValidInput = () => {\n    if (!topicInput.trim()) {\n      alert(\"Please enter a topic\");\n      return false;\n    }\n\n    if (!limitInput.trim() || isNaN(limitInput.trim()) || parseInt(limitInput.trim(), 10) <= 0) {\n      alert(\"Please enter a valid limit for the number of results (MAX \" + MAX_RESULT_LIMIT + \")\");\n      return false;\n    }\n\n    if (startDateInput.trim() || endDateInput.trim()) {\n      if (!endDateInput.trim()) {\n        alert(\"Please enter an end date range\");\n        return false;\n      } else if (!startDateInput.trim()) {\n        alert(\"Please enter a start date range\");\n        return false;\n      } else if (new Date(startDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid start date (Ex: 1/01/2019)\");\n        return false;\n      } else if (new Date(endDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid end date (Ex: 5/01/2020)\");\n        return false;\n      } else if (new Date(startDateInput.trim()).getTime() >= new Date(endDateInput.trim()).getTime()) {\n        alert(\"Make sure the start date range is earlier than the end date range\");\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n\n    if (isValidInput()) {\n      setShowResults(false);\n      setQuery({\n        topic: topicInput.trim(),\n        limit: Math.min(MAX_RESULT_LIMIT, parseInt(limitInput.trim(), 10)),\n        startDate: startDateInput.trim(),\n        endDate: endDateInput.trim()\n      });\n    }\n\n    clearInput();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"arXived\")), /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"App-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, \"arXived\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitForm,\n    className: \"input-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"topic-search-bar\",\n    type: \"text\",\n    placeholder: \"Enter a topic or author of interest\",\n    value: topicInput,\n    onChange: updateTopic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"limit-input-bar\",\n    type: \"text\",\n    placeholder: \"Result Limit (MAX \" + MAX_RESULT_LIMIT + \")\",\n    value: limitInput,\n    onChange: updateLimit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"date-input-bar\",\n    type: \"text\",\n    placeholder: \"1/01/2019 (Optional Start Range)\",\n    value: startDateInput,\n    onChange: updateStartDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"date-input-bar\",\n    type: \"text\",\n    placeholder: \"5/01/2020 (Optional End Range)\",\n    value: endDateInput,\n    onChange: updateEndDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"submit-button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, \"Scrape arXiv\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"entries\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }, showResults ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      'textAlign': 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, \"Top matches for \\\"\", query.topic, \"\\\"\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CSVLink, {\n    data: entries,\n    filename: \"arxiv_data.csv\",\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 16\n    }\n  }, \"Download as CSV\"), \" for the full results.\")) : /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      'textAlign': 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, \"Scraping information...\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, \"If you chose a specific date range, this could take a while...\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ClipLoader, {\n    size: 100,\n    color: \"#123abc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  })), showResults ? entries.slice(0, Math.min(MAX_TOP_MATCHES, entries.length)).map((data, i) => /*#__PURE__*/React.createElement(Entry, {\n    key: i,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 11\n    }\n  })) : null));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/shukan/Google Drive/Personal Projects/arxived/src/App.js"],"names":["React","useEffect","useState","ClipLoader","Helmet","CSVLink","Entry","App","entries","setEntries","topicInput","setTopicInput","limitInput","setLimitInput","startDateInput","setStartDateInput","endDateInput","setEndDateInput","showResults","setShowResults","MAX_TOP_MATCHES","MAX_RESULT_LIMIT","query","setQuery","topic","limit","startDate","endDate","scrapeArXiv","sleep","ms","Promise","resolve","setTimeout","start","response","fetch","responseString","text","results","window","DOMParser","parseFromString","querySelectorAll","trim","Date","getTime","publishDateString","length","querySelector","textContent","publishDate","previousResults","console","log","toDateString","concat","filtered","i","push","data","metadata","rawDate","authors","names","j","join","getAttribute","updateTopic","e","target","value","updateLimit","updateStartDate","updateEndDate","clearInput","isValidInput","alert","isNaN","parseInt","submitForm","preventDefault","Math","min","slice","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Helmet } from 'react-helmet';\nimport { CSVLink } from 'react-csv';\nimport Entry from './Entry.js';\nimport './App.css';\n\nconst App = () => {\n\n  const [entries, setEntries] = useState([]);\n  const [topicInput, setTopicInput] = useState('');\n  const [limitInput, setLimitInput] = useState('');\n  const [startDateInput, setStartDateInput] = useState('');\n  const [endDateInput, setEndDateInput] = useState('');\n  const [showResults, setShowResults] = useState(false);\n\n  const MAX_TOP_MATCHES = 20;\n  const MAX_RESULT_LIMIT = 1000;\n\n  const [query, setQuery] = useState({\n    topic: 'Shukan Shah',\n    limit: '10',\n    startDate: startDateInput,\n    endDate: endDateInput\n  });\n\n  useEffect(() => {\n    scrapeArXiv();\n  }, [query]);\n\n  const sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  const scrapeArXiv = async () => {\n\n    var start = 0;\n    var response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&start=${start}&max_results=${query.limit}`);\n    var responseString = await response.text();\n    var results = (new window.DOMParser()).parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n\n    if (query.startDate.trim() && query.endDate.trim()) {\n      var startDate = new Date(query.startDate.trim()).getTime();\n      var endDate = new Date(query.endDate.trim()).getTime();\n\n      var publishDateString = results[results.length - 1].querySelector('published').textContent.trim();\n      var publishDate = new Date(publishDateString).getTime();\n      var previousResults = [];\n\n\n      // Pagination for better performance\n      while (publishDate > startDate) {\n\n        console.log(new Date(publishDateString).toDateString());\n\n        start = start + MAX_RESULT_LIMIT;\n        previousResults = results;\n        response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&start=${start}&max_results=${100}`);\n        responseString = await response.text();\n        results = (new window.DOMParser()).parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n\n        publishDateString = results[results.length - 1].querySelector('published').textContent.trim();\n        publishDate = new Date(publishDateString).getTime();\n\n        // Sleep for 4 seconds to avoid querying too many times at once \n        await sleep(1000);\n      }\n\n      results = results.concat(previousResults);\n      var filtered = [];\n      var i = 0;\n\n      while (filtered.length <= query.limit && publishDate <= endDate) {\n        if (publishDate >= startDate) {\n          filtered.push(results[i]);\n        }\n        publishDateString = results[i].querySelector('published').textContent.trim();\n        publishDate = new Date(publishDateString).getTime();\n        i += 1;\n      }\n\n      results = filtered;\n    }\n\n    var data = []\n    for (var i = 0; i < results.length; i++) {\n      var metadata = {}\n\n      metadata['title'] = results[i].querySelector('title').textContent.trim();\n      const rawDate = results[i].querySelector('published').textContent.trim();\n      metadata['published'] = new Date(rawDate).toDateString();\n\n      const authors = results[i].querySelectorAll('author');\n      var names = [];\n      for (var j = 0; j < authors.length; j++) {\n        names.push(authors[j].textContent.trim());\n      }\n\n      metadata['authors'] = names.join(', ');\n      metadata['summary'] = results[i].querySelector('summary').textContent.trim();\n      metadata['link'] = results[i].querySelectorAll('link')[1].getAttribute('href').trim();\n      data.push(metadata);\n    }\n\n    console.log('Scraped ' + data.length + ' entries');\n    setEntries(data);\n    setShowResults(true);\n  }\n\n\n  const updateTopic = e => {\n    setTopicInput(e.target.value);\n  }\n\n  const updateLimit = e => {\n    setLimitInput(e.target.value);\n  }\n\n  const updateStartDate = e => {\n    setStartDateInput(e.target.value);\n  }\n\n  const updateEndDate = e => {\n    setEndDateInput(e.target.value);\n  }\n\n  const clearInput = () => {\n    setTopicInput('');\n    setLimitInput('');\n    setStartDateInput('');\n    setEndDateInput('');\n  }\n\n  const isValidInput = () => {\n    if (!topicInput.trim()) {\n      alert(\"Please enter a topic\");\n      return false;\n    }\n\n    if (!limitInput.trim() || isNaN(limitInput.trim()) || parseInt(limitInput.trim(), 10) <= 0) {\n      alert(\"Please enter a valid limit for the number of results (MAX \" + MAX_RESULT_LIMIT + \")\");\n      return false;\n    }\n\n    if (startDateInput.trim() || endDateInput.trim()) {\n      if (!endDateInput.trim()) {\n        alert(\"Please enter an end date range\");\n        return false;\n      } else if (!startDateInput.trim()) {\n        alert(\"Please enter a start date range\");\n        return false;\n      } else if (new Date(startDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid start date (Ex: 1/01/2019)\");\n        return false;\n      } else if (new Date(endDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid end date (Ex: 5/01/2020)\");\n        return false;\n      } else if (new Date(startDateInput.trim()).getTime() >= new Date(endDateInput.trim()).getTime()) {\n        alert(\"Make sure the start date range is earlier than the end date range\");\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  const submitForm = e => {\n    e.preventDefault();\n    if (isValidInput()) {\n      setShowResults(false);\n      setQuery({\n        topic: topicInput.trim(),\n        limit: Math.min(MAX_RESULT_LIMIT, parseInt(limitInput.trim(), 10)),\n        startDate: startDateInput.trim(),\n        endDate: endDateInput.trim()\n      });\n    }\n    clearInput();\n  }\n\n  return (\n    <div className='App'>\n      <Helmet>\n        <title>{\"arXived\"}</title>\n      </Helmet>\n\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">arXived</h1>\n      </header>\n\n      <form onSubmit={submitForm} className=\"input-form\" >\n        <input className=\"topic-search-bar\" type=\"text\" placeholder=\"Enter a topic or author of interest\"\n          value={topicInput} onChange={updateTopic} />\n        <input className=\"limit-input-bar\" type=\"text\" placeholder={\"Result Limit (MAX \" + MAX_RESULT_LIMIT + \")\"}\n          value={limitInput} onChange={updateLimit} />\n        <input className=\"date-input-bar\" type=\"text\" placeholder=\"1/01/2019 (Optional Start Range)\"\n          value={startDateInput} onChange={updateStartDate} />\n        <input className=\"date-input-bar\" type=\"text\" placeholder=\"5/01/2020 (Optional End Range)\"\n          value={endDateInput} onChange={updateEndDate} />\n        <button className=\"submit-button\" type=\"submit\">\n          Scrape arXiv\n        </button>\n      </form>\n\n      <div className='entries'>\n        {showResults ?\n          <div style={{ 'textAlign': 'center' }}>\n            <h2>Top matches for \"{query.topic}\"</h2>\n            <p><CSVLink data={entries} filename=\"arxiv_data.csv\" target=\"_blank\">Download as CSV</CSVLink> for the full results.</p>\n          </div>\n          :\n          <div style={{ 'textAlign': 'center' }}>\n            <h2>Scraping information...</h2>\n            <p>If you chose a specific date range, this could take a while...</p>\n            <br />\n            <ClipLoader size={100} color={\"#123abc\"} />\n          </div>}\n\n        {showResults ? entries.slice(0, Math.min(MAX_TOP_MATCHES, entries.length)).map((data, i) => (\n          <Entry key={i} data={data} />\n        )) : null}\n\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}