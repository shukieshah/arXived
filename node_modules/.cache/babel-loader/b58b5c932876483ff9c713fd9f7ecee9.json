{"ast":null,"code":"var _jsxFileName = \"/Users/shukan/Google Drive/Personal Projects/arxived/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Entry from './Entry.js';\nimport './App.css';\n\nconst App = () => {\n  // ['title', 'published', 'firstauthor', 'lastauthor', 'summary', 'category', 'link']\n  const [entries, setEntries] = useState([]);\n  const [topicInput, setTopicInput] = useState('');\n  const [limitInput, setLimitInput] = useState('');\n  const [startDateInput, setStartDateInput] = useState('');\n  const [endDateInput, setEndDateInput] = useState('');\n  const [showResults, setShowResults] = useState(false);\n  const [query, setQuery] = useState({\n    topic: topicInput,\n    limit: 0,\n    startDate: startDateInput,\n    endDate: endDateInput\n  });\n  useEffect(() => {\n    scrapeArXiv();\n  }, [query]);\n\n  const scrapeArXiv = async () => {\n    const response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&max_results=${query.limit}`);\n    const responseString = await response.text();\n    const results = new window.DOMParser().parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n    var data = [];\n\n    for (var i = 0; i < results.length; i++) {\n      var metadata = {};\n      metadata['title'] = results[i].querySelector('title').textContent.trim();\n      metadata['published'] = results[i].querySelector('published').textContent.trim();\n      metadata['summary'] = results[i].querySelector('summary').textContent.trim();\n      metadata['link'] = results[i].querySelectorAll('link')[1].getAttribute('href').trim();\n      const authors = results[i].querySelectorAll('author');\n      var names = [];\n\n      for (var j = 0; j < authors.length; j++) {\n        names.push(authors[j].textContent.trim());\n      }\n\n      metadata['authors'] = names;\n      data.push(metadata);\n    }\n\n    console.log('Scraped ' + data.length + ' entries');\n    setEntries(data);\n  };\n\n  const updateTopic = e => {\n    setTopicInput(e.target.value);\n  };\n\n  const updateLimit = e => {\n    setLimitInput(e.target.value);\n  };\n\n  const updateStartDate = e => {\n    setStartDateInput(e.target.value);\n  };\n\n  const updateEndDate = e => {\n    setEndDateInput(e.target.value);\n  };\n\n  const clearInput = () => {\n    setTopicInput('');\n    setLimitInput('');\n    setStartDateInput('');\n    setEndDateInput('');\n  };\n\n  const isValidInput = () => {\n    if (!topicInput.trim()) {\n      alert(\"Please enter a topic\");\n      return false;\n    }\n\n    if (!isNaN(limitInput.trim())) {\n      setLimitInput('10');\n    }\n\n    if (startDateInput.trim() || endDateInput.trim()) {\n      if (!endDateInput.trim()) {\n        alert(\"Please enter an end date range\");\n        return false;\n      } else if (!startDateInput.trim()) {\n        alert(\"Please enter a start date range\");\n        return false;\n      } else if (new Date(startDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid start date (Ex: 1/01/2019)\");\n        return false;\n      } else if (new Date(endDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid end date (Ex: 5/01/2020)\");\n        return false;\n      } else if (new Date(startDateInput.trim()).getTime() >= new Date(endDateInput.trim()).getTime()) {\n        alert(\"Make sure the start date range is earlier than the end date range\");\n        return false;\n      }\n    }\n\n    alert('VALID INPUT!');\n    return true;\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n\n    if (isValidInput()) {\n      setShowResults(true);\n      setQuery({\n        topic: topicInput.trim(),\n        limit: Math.min(1000, parseInt(limitInput.trim(), 10)),\n        startDate: startDateInput.trim(),\n        endDate: endDateInput.trim()\n      });\n    }\n\n    clearInput();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, \"arXived\")), /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"App-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, \"arXived\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitForm,\n    className: \"input-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"topic-search-bar\",\n    type: \"text\",\n    placeholder: \"Enter a topic of interest\",\n    value: topicInput,\n    onChange: updateTopic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"date-input-bar\",\n    type: \"text\",\n    placeholder: \"1/01/2019 (Optional Start Range)\",\n    value: startDateInput,\n    onChange: updateStartDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"date-input-bar\",\n    type: \"text\",\n    placeholder: \"5/01/2020 (Optional End Range)\",\n    value: endDateInput,\n    onChange: updateEndDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"limit-input-bar\",\n    type: \"text\",\n    placeholder: \"Result Limit (MAX 1000)\",\n    value: limitInput,\n    onChange: updateLimit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"submit-button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, \"Scrape arXiv\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"submit-button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, \"Download CSV\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"entries\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, showResults ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      'textAlign': 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }\n  }, \"Top Matches for \\\"\", query.topic, \"\\\"\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 25\n    }\n  }, \"Download as CSV for the full results.\")) : null, entries.map((data, i) => /*#__PURE__*/React.createElement(Entry, {\n    key: i,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/shukan/Google Drive/Personal Projects/arxived/src/App.js"],"names":["React","useEffect","useState","Helmet","Entry","App","entries","setEntries","topicInput","setTopicInput","limitInput","setLimitInput","startDateInput","setStartDateInput","endDateInput","setEndDateInput","showResults","setShowResults","query","setQuery","topic","limit","startDate","endDate","scrapeArXiv","response","fetch","responseString","text","results","window","DOMParser","parseFromString","querySelectorAll","data","i","length","metadata","querySelector","textContent","trim","getAttribute","authors","names","j","push","console","log","updateTopic","e","target","value","updateLimit","updateStartDate","updateEndDate","clearInput","isValidInput","alert","isNaN","Date","getTime","submitForm","preventDefault","Math","min","parseInt","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Entry from './Entry.js';\nimport './App.css';\n\nconst App = () => {\n\n  // ['title', 'published', 'firstauthor', 'lastauthor', 'summary', 'category', 'link']\n\n  const [entries, setEntries] = useState([]);\n  const [topicInput, setTopicInput] = useState('');\n  const [limitInput, setLimitInput] = useState('');\n  const [startDateInput, setStartDateInput] = useState('');\n  const [endDateInput, setEndDateInput] = useState('');\n  const [showResults, setShowResults] = useState(false);\n\n  const [query, setQuery] = useState({\n    topic: topicInput,\n    limit: 0,\n    startDate: startDateInput,\n    endDate: endDateInput\n  });\n\n\n  useEffect(() => {\n    scrapeArXiv();\n  }, [query]);\n\n  const scrapeArXiv = async () => {\n    const response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&max_results=${query.limit}`);\n    const responseString = await response.text();\n    const results = (new window.DOMParser()).parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n    var data = []\n\n    for (var i = 0; i < results.length; i++) {\n      var metadata = {}\n      metadata['title'] = results[i].querySelector('title').textContent.trim();\n      metadata['published'] = results[i].querySelector('published').textContent.trim();\n      metadata['summary'] = results[i].querySelector('summary').textContent.trim();\n      metadata['link'] = results[i].querySelectorAll('link')[1].getAttribute('href').trim();\n\n      const authors = results[i].querySelectorAll('author');\n      var names = [];\n      for (var j = 0; j < authors.length; j++) {\n        names.push(authors[j].textContent.trim());\n      }\n      metadata['authors'] = names;\n      data.push(metadata);\n    }\n\n    console.log('Scraped ' + data.length + ' entries');\n    setEntries(data);\n  }\n\n\n  const updateTopic = e => {\n    setTopicInput(e.target.value);\n  }\n\n  const updateLimit = e => {\n    setLimitInput(e.target.value);\n  }\n\n  const updateStartDate = e => {\n    setStartDateInput(e.target.value);\n  }\n\n  const updateEndDate = e => {\n    setEndDateInput(e.target.value);\n  }\n\n  const clearInput = () => {\n    setTopicInput('');\n    setLimitInput('');\n    setStartDateInput('');\n    setEndDateInput('');\n  }\n\n  const isValidInput = () => {\n    if (!topicInput.trim()) {\n      alert(\"Please enter a topic\");\n      return false;\n    }\n\n    if (!isNaN(limitInput.trim())) {\n      setLimitInput('10');\n    }\n\n    if (startDateInput.trim() || endDateInput.trim()) {\n      if (!endDateInput.trim()) {\n        alert(\"Please enter an end date range\");\n        return false;\n      } else if (!startDateInput.trim()) {\n        alert(\"Please enter a start date range\");\n        return false;\n      } else if (new Date(startDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid start date (Ex: 1/01/2019)\");\n        return false;\n      } else if (new Date(endDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid end date (Ex: 5/01/2020)\");\n        return false;\n      } else if (new Date(startDateInput.trim()).getTime() >= new Date(endDateInput.trim()).getTime()) {\n        alert(\"Make sure the start date range is earlier than the end date range\");\n        return false;\n      }\n    }\n\n    alert('VALID INPUT!')\n    return true;\n  }\n\n  const submitForm = e => {\n    e.preventDefault();\n    if (isValidInput()) {\n      setShowResults(true);\n      setQuery({\n        topic: topicInput.trim(),\n        limit: Math.min(1000, parseInt(limitInput.trim(), 10)),\n        startDate: startDateInput.trim(),\n        endDate: endDateInput.trim()\n      });\n    }\n    clearInput();\n  }\n\n  return (\n    <div className='App'>\n      <Helmet>\n        <title>{\"arXived\"}</title>\n      </Helmet>\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">arXived</h1>\n      </header>\n\n      <form onSubmit={submitForm} className=\"input-form\" >\n\n        <input className=\"topic-search-bar\" type=\"text\" placeholder=\"Enter a topic of interest\"\n          value={topicInput} onChange={updateTopic} />\n\n        <input className=\"date-input-bar\" type=\"text\" placeholder=\"1/01/2019 (Optional Start Range)\"\n          value={startDateInput} onChange={updateStartDate} />\n        <input className=\"date-input-bar\" type=\"text\" placeholder=\"5/01/2020 (Optional End Range)\"\n          value={endDateInput} onChange={updateEndDate} />\n        <input className=\"limit-input-bar\" type=\"text\" placeholder=\"Result Limit (MAX 1000)\"\n          value={limitInput} onChange={updateLimit} />\n\n        <button className=\"submit-button\" type=\"submit\">\n          Scrape arXiv\n        </button>\n\n        <button className=\"submit-button\" type=\"submit\">\n          Download CSV\n        </button>\n      </form>\n\n      <div className='entries'>\n        {showResults ? <div style={{ 'textAlign': 'center' }}>\n                        <h1>Top Matches for \"{query.topic}\"</h1>\n                        <p>Download as CSV for the full results.</p>\n                        </div> : null }\n        {/* <div style={{ 'textAlign': 'center' }}>\n          <h1>Top Matches for \"{query.topic}\"</h1>\n          <p>Download as CSV for the full results.</p>\n        </div> */}\n        {entries.map((data, i) => (\n          <Entry key={i} data={data} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}