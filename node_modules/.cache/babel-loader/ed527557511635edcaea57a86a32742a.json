{"ast":null,"code":"var _jsxFileName = \"/Users/shukan/Google Drive/Personal Projects/arxived/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Entry from './Entry.js';\nimport './App.css';\n\nconst App = () => {\n  const topic = \"quantum computing\";\n  const limit = 10; // ['title', 'published', 'firstauthor', 'lastauthor', 'summary', 'category', 'link']\n\n  const [entries, setEntries] = useState([]);\n  const BASE_API_URL = `http://export.arxiv.org/api/query?search_query=all:\"${topic}\"&sortBy=submittedDate&sortOrder=descending&max_results=${limit}`;\n  useEffect(() => {\n    scrapeArXiv();\n  }, []);\n\n  const scrapeArXiv = async () => {\n    const response = await fetch(BASE_API_URL);\n    const responseString = await response.text();\n    const results = new window.DOMParser().parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n    var data = [];\n\n    for (var i = 0; i < results.length; i++) {\n      var metadata = {};\n      metadata['title'] = results[i].querySelector('title').textContent.trim();\n      metadata['published'] = results[i].querySelector('published').textContent.trim();\n      metadata['summary'] = results[i].querySelector('summary').textContent.trim();\n      metadata['link'] = results[i].querySelector('link').getAttribute('href').trim();\n      const authors = results[i].querySelectorAll('author');\n      var names = [];\n\n      for (var j = 0; j < authors.length; j++) {\n        names.push(authors[j].textContent.trim());\n      }\n\n      metadata['authors'] = names;\n      data.push(metadata);\n    }\n\n    console.log('Scraped ' + data.length + ' entries');\n    setEntries(data);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"input-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"topic-search-bar\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"submit-button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Scrape arXiv\")), entries.map(data => /*#__PURE__*/React.createElement(Entry, {\n    key: data.title,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/shukan/Google Drive/Personal Projects/arxived/src/App.js"],"names":["React","useEffect","useState","Entry","App","topic","limit","entries","setEntries","BASE_API_URL","scrapeArXiv","response","fetch","responseString","text","results","window","DOMParser","parseFromString","querySelectorAll","data","i","length","metadata","querySelector","textContent","trim","getAttribute","authors","names","j","push","console","log","map","title"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Entry from './Entry.js';\nimport './App.css';\n\nconst App = () => {\n\n  \n  const topic = \"quantum computing\";\n  const limit = 10;\n  \n  // ['title', 'published', 'firstauthor', 'lastauthor', 'summary', 'category', 'link']\n  \n  const [entries, setEntries] = useState([]);\n\n  const BASE_API_URL = `http://export.arxiv.org/api/query?search_query=all:\"${topic}\"&sortBy=submittedDate&sortOrder=descending&max_results=${limit}`;\n  \n  useEffect(() => {\n    scrapeArXiv();\n  }, []);\n\n  const scrapeArXiv = async () => {\n    const response = await fetch(BASE_API_URL);\n    const responseString = await response.text();\n    const results = (new window.DOMParser()).parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n    var data = []\n\n    for (var i=0; i < results.length; i++) {\n      var metadata = {}\n      metadata['title'] = results[i].querySelector('title').textContent.trim();\n      metadata['published'] = results[i].querySelector('published').textContent.trim();\n      metadata['summary'] = results[i].querySelector('summary').textContent.trim();\n      metadata['link'] = results[i].querySelector('link').getAttribute('href').trim();\n\n      const authors = results[i].querySelectorAll('author');\n      var names = [] ;\n      for (var j=0; j < authors.length; j++) {\n        names.push(authors[j].textContent.trim());\n      }\n      metadata['authors'] = names;\n      data.push(metadata);\n    }\n\n    console.log('Scraped ' + data.length + ' entries');\n    setEntries(data);\n  }\n\n\n  return (\n    <div className='App'>\n      <form className=\"input-form\">\n        <input className=\"topic-search-bar\" type=\"text\"/>\n        <button className=\"submit-button\" type=\"submit\">\n          Scrape arXiv\n        </button>\n      </form>\n      {entries.map(data => (\n        <Entry key={data.title} data={data} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}