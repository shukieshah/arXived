{"ast":null,"code":"\"use strict\";\n/*\nfile:         row + EOF;\nrow:          value (Comma value)* (LineBreak | EOF);\nvalue:        SimpleValue | QuotedValue;\nComma:        ',';\nLineBreak:    '\\r'?'\\n' | '\\r';\nSimpleValue:  ~(',' | '\\r' | '\\n' | '\"')+;\nQuotedValue:  Residue '\"' ('\"\"' | ~'\"')* '\"' Residue;\nResidue:      (' ' | '\\t' | '\\f')*\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser(input, comma, quote) {\n    if (!(this instanceof Parser)) {\n      return new Parser(input, comma);\n    }\n\n    this.input = input;\n    this.pointer = 0;\n    this.linePointer = 0;\n    this.comma = comma && comma[0] || ',';\n    this.quote = quote && quote[0] || '\"'; // initialize RegExp Object\n\n    var residueChars = ' \\f\\v\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000';\n\n    if (this.comma !== '\\t') {\n      residueChars += '\\t';\n    }\n\n    this._residueRegExp = new RegExp(\"[^\" + residueChars + \"]\"); // TODO: `(${this.comma}|\\r\\n)` instead?\n\n    this._simpleValueRegExp = new RegExp(\"[\" + this.comma + \"\\r\\n]\");\n    this._replaceQuoteRegExp = new RegExp(this.quote + this.quote, 'g');\n  }\n\n  Parser.prototype.File = function () {\n    var files = [];\n    var row;\n\n    while (true) {\n      var tempointer = this.pointer;\n      row = this.Row();\n\n      if (row.length > 0) {\n        this.linePointer = tempointer;\n        files.push(row);\n      } else {\n        if (this.linePointer && this.pointer !== this.input.length) {\n          files.pop();\n          this.pointer = this.linePointer;\n        }\n\n        break;\n      }\n\n      if (this.EOF()) {\n        if (this.linePointer && this.pointer !== this.input.length) {\n          files.pop();\n          this.pointer = this.linePointer;\n        }\n\n        break;\n      }\n    }\n\n    return files;\n  };\n\n  Parser.prototype.Row = function () {\n    var row = [];\n\n    while (true) {\n      row.push(this.Value());\n\n      if (this.Comma()) {\n        continue;\n      }\n\n      if (this.LineBreak() || this.EOF()) {\n        return row;\n      } else {\n        row.pop();\n        return row;\n      }\n    }\n  };\n\n  Parser.prototype.Value = function () {\n    var residue = this.Residue();\n    var quotedvalue = this.QuotedValue();\n\n    if (quotedvalue) {\n      var value = quotedvalue.slice(1, -1).replace(this._replaceQuoteRegExp, this.quote);\n      this.Residue();\n      return value;\n    }\n\n    var simplevalue = this.SimpleValue();\n\n    if (simplevalue) {\n      return residue ? residue + simplevalue : simplevalue;\n    }\n\n    return '';\n  };\n\n  Parser.prototype.Comma = function () {\n    if (this.input.slice(this.pointer, this.pointer + this.comma.length) === this.comma) {\n      this.pointer += this.comma.length;\n      return this.comma;\n    }\n  };\n\n  Parser.prototype.LineBreak = function () {\n    if (this.input.slice(this.pointer, this.pointer + 2) === '\\r\\n') {\n      this.pointer += 2;\n      return '\\r\\n';\n    }\n\n    if (this.input.charAt(this.pointer) === '\\n') {\n      this.pointer += 1;\n      return '\\n';\n    }\n\n    if (this.input.charAt(this.pointer) === '\\r') {\n      this.pointer += 1;\n      return '\\r';\n    }\n  };\n\n  Parser.prototype.SimpleValue = function () {\n    var value = '';\n    var index = this.input.slice(this.pointer).search(this._simpleValueRegExp);\n\n    if (this.input.charAt(this.pointer) === this.quote) {\n      return;\n    } else if (index === -1) {\n      value = this.input.slice(this.pointer);\n    } else if (index === 0) {\n      return;\n    } else {\n      value = this.input.slice(this.pointer, this.pointer + index);\n    }\n\n    this.pointer += value.length;\n    return value;\n  };\n\n  Parser.prototype.QuotedValue = function () {\n    if (this.input.charAt(this.pointer) === this.quote) {\n      var searchIndex = void 0;\n      var index = 1;\n\n      while (true) {\n        searchIndex = this.input.slice(this.pointer + index).search(this.quote);\n\n        if (searchIndex === -1) {\n          return;\n        }\n\n        if (this.input.charAt(this.pointer + index + searchIndex + 1) === this.quote) {\n          index += searchIndex + 2;\n          continue;\n        }\n\n        var value = this.input.slice(this.pointer, this.pointer + index + searchIndex + 1);\n        this.pointer += value.length;\n        return value;\n      }\n    }\n  };\n\n  Parser.prototype.EOF = function () {\n    return this.pointer >= this.input.length;\n  };\n\n  Parser.prototype.Residue = function () {\n    var value = '';\n    var index = this.input.slice(this.pointer).search(this._residueRegExp);\n\n    if (index === -1) {\n      value = this.input.slice(this.pointer);\n    } else if (index === 0) {\n      return '';\n    } else {\n      value = this.input.slice(this.pointer, this.pointer + index);\n    }\n\n    this.pointer += value.length;\n    return value;\n  };\n\n  return Parser;\n}();\n\nexports.Parser = Parser;","map":{"version":3,"sources":["/Users/shukan/Google Drive/Personal Projects/arxived/node_modules/csv-string/dist/Parser.js"],"names":["Object","defineProperty","exports","value","Parser","input","comma","quote","pointer","linePointer","residueChars","_residueRegExp","RegExp","_simpleValueRegExp","_replaceQuoteRegExp","prototype","File","files","row","tempointer","Row","length","push","pop","EOF","Value","Comma","LineBreak","residue","Residue","quotedvalue","QuotedValue","slice","replace","simplevalue","SimpleValue","charAt","index","search","searchIndex"],"mappings":"AAAA;AACA;;;;;;;;;;;AAUAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM;AAAG;AAAe,YAAY;AACpC,WAASA,MAAT,CAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AACjC,QAAI,EAAE,gBAAgBH,MAAlB,CAAJ,EAA+B;AAC3B,aAAO,IAAIA,MAAJ,CAAWC,KAAX,EAAkBC,KAAlB,CAAP;AACH;;AACD,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKG,OAAL,GAAe,CAAf;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKH,KAAL,GAAcA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAf,IAAuB,GAApC;AACA,SAAKC,KAAL,GAAcA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAf,IAAuB,GAApC,CARiC,CASjC;;AACA,QAAIG,YAAY,GAAG,yHAAnB;;AACA,QAAI,KAAKJ,KAAL,KAAe,IAAnB,EAAyB;AACrBI,MAAAA,YAAY,IAAI,IAAhB;AACH;;AACD,SAAKC,cAAL,GAAsB,IAAIC,MAAJ,CAAW,OAAOF,YAAP,GAAsB,GAAjC,CAAtB,CAdiC,CAejC;;AACA,SAAKG,kBAAL,GAA0B,IAAID,MAAJ,CAAW,MAAM,KAAKN,KAAX,GAAmB,OAA9B,CAA1B;AACA,SAAKQ,mBAAL,GAA2B,IAAIF,MAAJ,CAAW,KAAKL,KAAL,GAAa,KAAKA,KAA7B,EAAoC,GAApC,CAA3B;AACH;;AACDH,EAAAA,MAAM,CAACW,SAAP,CAAiBC,IAAjB,GAAwB,YAAY;AAChC,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,GAAJ;;AACA,WAAO,IAAP,EAAa;AACT,UAAIC,UAAU,GAAG,KAAKX,OAAtB;AACAU,MAAAA,GAAG,GAAG,KAAKE,GAAL,EAAN;;AACA,UAAIF,GAAG,CAACG,MAAJ,GAAa,CAAjB,EAAoB;AAChB,aAAKZ,WAAL,GAAmBU,UAAnB;AACAF,QAAAA,KAAK,CAACK,IAAN,CAAWJ,GAAX;AACH,OAHD,MAIK;AACD,YAAI,KAAKT,WAAL,IAAoB,KAAKD,OAAL,KAAiB,KAAKH,KAAL,CAAWgB,MAApD,EAA4D;AACxDJ,UAAAA,KAAK,CAACM,GAAN;AACA,eAAKf,OAAL,GAAe,KAAKC,WAApB;AACH;;AACD;AACH;;AACD,UAAI,KAAKe,GAAL,EAAJ,EAAgB;AACZ,YAAI,KAAKf,WAAL,IAAoB,KAAKD,OAAL,KAAiB,KAAKH,KAAL,CAAWgB,MAApD,EAA4D;AACxDJ,UAAAA,KAAK,CAACM,GAAN;AACA,eAAKf,OAAL,GAAe,KAAKC,WAApB;AACH;;AACD;AACH;AACJ;;AACD,WAAOQ,KAAP;AACH,GA1BD;;AA2BAb,EAAAA,MAAM,CAACW,SAAP,CAAiBK,GAAjB,GAAuB,YAAY;AAC/B,QAAIF,GAAG,GAAG,EAAV;;AACA,WAAO,IAAP,EAAa;AACTA,MAAAA,GAAG,CAACI,IAAJ,CAAS,KAAKG,KAAL,EAAT;;AACA,UAAI,KAAKC,KAAL,EAAJ,EAAkB;AACd;AACH;;AACD,UAAI,KAAKC,SAAL,MAAoB,KAAKH,GAAL,EAAxB,EAAoC;AAChC,eAAON,GAAP;AACH,OAFD,MAGK;AACDA,QAAAA,GAAG,CAACK,GAAJ;AACA,eAAOL,GAAP;AACH;AACJ;AACJ,GAfD;;AAgBAd,EAAAA,MAAM,CAACW,SAAP,CAAiBU,KAAjB,GAAyB,YAAY;AACjC,QAAIG,OAAO,GAAG,KAAKC,OAAL,EAAd;AACA,QAAIC,WAAW,GAAG,KAAKC,WAAL,EAAlB;;AACA,QAAID,WAAJ,EAAiB;AACb,UAAI3B,KAAK,GAAG2B,WAAW,CAClBE,KADO,CACD,CADC,EACE,CAAC,CADH,EAEPC,OAFO,CAEC,KAAKnB,mBAFN,EAE2B,KAAKP,KAFhC,CAAZ;AAGA,WAAKsB,OAAL;AACA,aAAO1B,KAAP;AACH;;AACD,QAAI+B,WAAW,GAAG,KAAKC,WAAL,EAAlB;;AACA,QAAID,WAAJ,EAAiB;AACb,aAAON,OAAO,GAAGA,OAAO,GAAGM,WAAb,GAA2BA,WAAzC;AACH;;AACD,WAAO,EAAP;AACH,GAfD;;AAgBA9B,EAAAA,MAAM,CAACW,SAAP,CAAiBW,KAAjB,GAAyB,YAAY;AACjC,QAAI,KAAKrB,KAAL,CAAW2B,KAAX,CAAiB,KAAKxB,OAAtB,EAA+B,KAAKA,OAAL,GAAe,KAAKF,KAAL,CAAWe,MAAzD,MACA,KAAKf,KADT,EACgB;AACZ,WAAKE,OAAL,IAAgB,KAAKF,KAAL,CAAWe,MAA3B;AACA,aAAO,KAAKf,KAAZ;AACH;AACJ,GAND;;AAOAF,EAAAA,MAAM,CAACW,SAAP,CAAiBY,SAAjB,GAA6B,YAAY;AACrC,QAAI,KAAKtB,KAAL,CAAW2B,KAAX,CAAiB,KAAKxB,OAAtB,EAA+B,KAAKA,OAAL,GAAe,CAA9C,MAAqD,MAAzD,EAAiE;AAC7D,WAAKA,OAAL,IAAgB,CAAhB;AACA,aAAO,MAAP;AACH;;AACD,QAAI,KAAKH,KAAL,CAAW+B,MAAX,CAAkB,KAAK5B,OAAvB,MAAoC,IAAxC,EAA8C;AAC1C,WAAKA,OAAL,IAAgB,CAAhB;AACA,aAAO,IAAP;AACH;;AACD,QAAI,KAAKH,KAAL,CAAW+B,MAAX,CAAkB,KAAK5B,OAAvB,MAAoC,IAAxC,EAA8C;AAC1C,WAAKA,OAAL,IAAgB,CAAhB;AACA,aAAO,IAAP;AACH;AACJ,GAbD;;AAcAJ,EAAAA,MAAM,CAACW,SAAP,CAAiBoB,WAAjB,GAA+B,YAAY;AACvC,QAAIhC,KAAK,GAAG,EAAZ;AACA,QAAIkC,KAAK,GAAG,KAAKhC,KAAL,CACP2B,KADO,CACD,KAAKxB,OADJ,EAEP8B,MAFO,CAEA,KAAKzB,kBAFL,CAAZ;;AAGA,QAAI,KAAKR,KAAL,CAAW+B,MAAX,CAAkB,KAAK5B,OAAvB,MAAoC,KAAKD,KAA7C,EAAoD;AAChD;AACH,KAFD,MAGK,IAAI8B,KAAK,KAAK,CAAC,CAAf,EAAkB;AACnBlC,MAAAA,KAAK,GAAG,KAAKE,KAAL,CAAW2B,KAAX,CAAiB,KAAKxB,OAAtB,CAAR;AACH,KAFI,MAGA,IAAI6B,KAAK,KAAK,CAAd,EAAiB;AAClB;AACH,KAFI,MAGA;AACDlC,MAAAA,KAAK,GAAG,KAAKE,KAAL,CAAW2B,KAAX,CAAiB,KAAKxB,OAAtB,EAA+B,KAAKA,OAAL,GAAe6B,KAA9C,CAAR;AACH;;AACD,SAAK7B,OAAL,IAAgBL,KAAK,CAACkB,MAAtB;AACA,WAAOlB,KAAP;AACH,GAnBD;;AAoBAC,EAAAA,MAAM,CAACW,SAAP,CAAiBgB,WAAjB,GAA+B,YAAY;AACvC,QAAI,KAAK1B,KAAL,CAAW+B,MAAX,CAAkB,KAAK5B,OAAvB,MAAoC,KAAKD,KAA7C,EAAoD;AAChD,UAAIgC,WAAW,GAAG,KAAK,CAAvB;AACA,UAAIF,KAAK,GAAG,CAAZ;;AACA,aAAO,IAAP,EAAa;AACTE,QAAAA,WAAW,GAAG,KAAKlC,KAAL,CAAW2B,KAAX,CAAiB,KAAKxB,OAAL,GAAe6B,KAAhC,EAAuCC,MAAvC,CAA8C,KAAK/B,KAAnD,CAAd;;AACA,YAAIgC,WAAW,KAAK,CAAC,CAArB,EAAwB;AACpB;AACH;;AACD,YAAI,KAAKlC,KAAL,CAAW+B,MAAX,CAAkB,KAAK5B,OAAL,GAAe6B,KAAf,GAAuBE,WAAvB,GAAqC,CAAvD,MACA,KAAKhC,KADT,EACgB;AACZ8B,UAAAA,KAAK,IAAIE,WAAW,GAAG,CAAvB;AACA;AACH;;AACD,YAAIpC,KAAK,GAAG,KAAKE,KAAL,CAAW2B,KAAX,CAAiB,KAAKxB,OAAtB,EAA+B,KAAKA,OAAL,GAAe6B,KAAf,GAAuBE,WAAvB,GAAqC,CAApE,CAAZ;AACA,aAAK/B,OAAL,IAAgBL,KAAK,CAACkB,MAAtB;AACA,eAAOlB,KAAP;AACH;AACJ;AACJ,GAnBD;;AAoBAC,EAAAA,MAAM,CAACW,SAAP,CAAiBS,GAAjB,GAAuB,YAAY;AAC/B,WAAO,KAAKhB,OAAL,IAAgB,KAAKH,KAAL,CAAWgB,MAAlC;AACH,GAFD;;AAGAjB,EAAAA,MAAM,CAACW,SAAP,CAAiBc,OAAjB,GAA2B,YAAY;AACnC,QAAI1B,KAAK,GAAG,EAAZ;AACA,QAAIkC,KAAK,GAAG,KAAKhC,KAAL,CAAW2B,KAAX,CAAiB,KAAKxB,OAAtB,EAA+B8B,MAA/B,CAAsC,KAAK3B,cAA3C,CAAZ;;AACA,QAAI0B,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdlC,MAAAA,KAAK,GAAG,KAAKE,KAAL,CAAW2B,KAAX,CAAiB,KAAKxB,OAAtB,CAAR;AACH,KAFD,MAGK,IAAI6B,KAAK,KAAK,CAAd,EAAiB;AAClB,aAAO,EAAP;AACH,KAFI,MAGA;AACDlC,MAAAA,KAAK,GAAG,KAAKE,KAAL,CAAW2B,KAAX,CAAiB,KAAKxB,OAAtB,EAA+B,KAAKA,OAAL,GAAe6B,KAA9C,CAAR;AACH;;AACD,SAAK7B,OAAL,IAAgBL,KAAK,CAACkB,MAAtB;AACA,WAAOlB,KAAP;AACH,GAdD;;AAeA,SAAOC,MAAP;AACH,CA/J2B,EAA5B;;AAgKAF,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\n/*\nfile:         row + EOF;\nrow:          value (Comma value)* (LineBreak | EOF);\nvalue:        SimpleValue | QuotedValue;\nComma:        ',';\nLineBreak:    '\\r'?'\\n' | '\\r';\nSimpleValue:  ~(',' | '\\r' | '\\n' | '\"')+;\nQuotedValue:  Residue '\"' ('\"\"' | ~'\"')* '\"' Residue;\nResidue:      (' ' | '\\t' | '\\f')*\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Parser = /** @class */ (function () {\n    function Parser(input, comma, quote) {\n        if (!(this instanceof Parser)) {\n            return new Parser(input, comma);\n        }\n        this.input = input;\n        this.pointer = 0;\n        this.linePointer = 0;\n        this.comma = (comma && comma[0]) || ',';\n        this.quote = (quote && quote[0]) || '\"';\n        // initialize RegExp Object\n        var residueChars = ' \\f\\v\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000';\n        if (this.comma !== '\\t') {\n            residueChars += '\\t';\n        }\n        this._residueRegExp = new RegExp(\"[^\" + residueChars + \"]\");\n        // TODO: `(${this.comma}|\\r\\n)` instead?\n        this._simpleValueRegExp = new RegExp(\"[\" + this.comma + \"\\r\\n]\");\n        this._replaceQuoteRegExp = new RegExp(this.quote + this.quote, 'g');\n    }\n    Parser.prototype.File = function () {\n        var files = [];\n        var row;\n        while (true) {\n            var tempointer = this.pointer;\n            row = this.Row();\n            if (row.length > 0) {\n                this.linePointer = tempointer;\n                files.push(row);\n            }\n            else {\n                if (this.linePointer && this.pointer !== this.input.length) {\n                    files.pop();\n                    this.pointer = this.linePointer;\n                }\n                break;\n            }\n            if (this.EOF()) {\n                if (this.linePointer && this.pointer !== this.input.length) {\n                    files.pop();\n                    this.pointer = this.linePointer;\n                }\n                break;\n            }\n        }\n        return files;\n    };\n    Parser.prototype.Row = function () {\n        var row = [];\n        while (true) {\n            row.push(this.Value());\n            if (this.Comma()) {\n                continue;\n            }\n            if (this.LineBreak() || this.EOF()) {\n                return row;\n            }\n            else {\n                row.pop();\n                return row;\n            }\n        }\n    };\n    Parser.prototype.Value = function () {\n        var residue = this.Residue();\n        var quotedvalue = this.QuotedValue();\n        if (quotedvalue) {\n            var value = quotedvalue\n                .slice(1, -1)\n                .replace(this._replaceQuoteRegExp, this.quote);\n            this.Residue();\n            return value;\n        }\n        var simplevalue = this.SimpleValue();\n        if (simplevalue) {\n            return residue ? residue + simplevalue : simplevalue;\n        }\n        return '';\n    };\n    Parser.prototype.Comma = function () {\n        if (this.input.slice(this.pointer, this.pointer + this.comma.length) ===\n            this.comma) {\n            this.pointer += this.comma.length;\n            return this.comma;\n        }\n    };\n    Parser.prototype.LineBreak = function () {\n        if (this.input.slice(this.pointer, this.pointer + 2) === '\\r\\n') {\n            this.pointer += 2;\n            return '\\r\\n';\n        }\n        if (this.input.charAt(this.pointer) === '\\n') {\n            this.pointer += 1;\n            return '\\n';\n        }\n        if (this.input.charAt(this.pointer) === '\\r') {\n            this.pointer += 1;\n            return '\\r';\n        }\n    };\n    Parser.prototype.SimpleValue = function () {\n        var value = '';\n        var index = this.input\n            .slice(this.pointer)\n            .search(this._simpleValueRegExp);\n        if (this.input.charAt(this.pointer) === this.quote) {\n            return;\n        }\n        else if (index === -1) {\n            value = this.input.slice(this.pointer);\n        }\n        else if (index === 0) {\n            return;\n        }\n        else {\n            value = this.input.slice(this.pointer, this.pointer + index);\n        }\n        this.pointer += value.length;\n        return value;\n    };\n    Parser.prototype.QuotedValue = function () {\n        if (this.input.charAt(this.pointer) === this.quote) {\n            var searchIndex = void 0;\n            var index = 1;\n            while (true) {\n                searchIndex = this.input.slice(this.pointer + index).search(this.quote);\n                if (searchIndex === -1) {\n                    return;\n                }\n                if (this.input.charAt(this.pointer + index + searchIndex + 1) ===\n                    this.quote) {\n                    index += searchIndex + 2;\n                    continue;\n                }\n                var value = this.input.slice(this.pointer, this.pointer + index + searchIndex + 1);\n                this.pointer += value.length;\n                return value;\n            }\n        }\n    };\n    Parser.prototype.EOF = function () {\n        return this.pointer >= this.input.length;\n    };\n    Parser.prototype.Residue = function () {\n        var value = '';\n        var index = this.input.slice(this.pointer).search(this._residueRegExp);\n        if (index === -1) {\n            value = this.input.slice(this.pointer);\n        }\n        else if (index === 0) {\n            return '';\n        }\n        else {\n            value = this.input.slice(this.pointer, this.pointer + index);\n        }\n        this.pointer += value.length;\n        return value;\n    };\n    return Parser;\n}());\nexports.Parser = Parser;\n"]},"metadata":{},"sourceType":"script"}