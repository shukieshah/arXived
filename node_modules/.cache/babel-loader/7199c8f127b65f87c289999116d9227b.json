{"ast":null,"code":"var _jsxFileName = \"/Users/shukan/Google Drive/Personal Projects/arxived/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { CSVLink, CSVDownload } from 'react-csv';\nimport Entry from './Entry.js';\nimport './App.css';\n\nconst App = () => {\n  var csvData = [];\n  const [entries, setEntries] = useState([]);\n  const [topicInput, setTopicInput] = useState('');\n  const [limitInput, setLimitInput] = useState('');\n  const [startDateInput, setStartDateInput] = useState('');\n  const [endDateInput, setEndDateInput] = useState('');\n  const [showResults, setShowResults] = useState(false);\n  const [query, setQuery] = useState({\n    topic: topicInput,\n    limit: '0',\n    startDate: startDateInput,\n    endDate: endDateInput\n  });\n  useEffect(() => {\n    scrapeArXiv();\n  }, [query]);\n\n  const scrapeArXiv = async () => {\n    const response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&max_results=${query.limit}`);\n    const responseString = await response.text();\n    const results = new window.DOMParser().parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n    var data = [];\n    csvData = [['title', 'published', 'authors', 'summary', 'link']];\n\n    for (var i = 0; i < results.length; i++) {\n      var metadata = {};\n      var csvRow = [];\n      metadata['title'] = results[i].querySelector('title').textContent.trim();\n      metadata['published'] = results[i].querySelector('published').textContent.trim();\n      metadata['summary'] = results[i].querySelector('summary').textContent.trim();\n      metadata['link'] = results[i].querySelectorAll('link')[1].getAttribute('href').trim();\n      const authors = results[i].querySelectorAll('author');\n      var names = [];\n\n      for (var j = 0; j < authors.length; j++) {\n        names.push(authors[j].textContent.trim());\n      }\n\n      metadata['authors'] = names;\n      csvData.push(metadata['title'], metadata['published'], metadata['authors'].join(', '), metadata['summary'], metadata['link']);\n      data.push(metadata);\n    }\n\n    console.log('Scraped ' + data.length + ' entries');\n    console.log(csvData);\n    setEntries(data);\n  };\n\n  const updateTopic = e => {\n    setTopicInput(e.target.value);\n  };\n\n  const updateLimit = e => {\n    setLimitInput(e.target.value);\n  };\n\n  const updateStartDate = e => {\n    setStartDateInput(e.target.value);\n  };\n\n  const updateEndDate = e => {\n    setEndDateInput(e.target.value);\n  };\n\n  const clearInput = () => {\n    setTopicInput('');\n    setLimitInput('');\n    setStartDateInput('');\n    setEndDateInput('');\n  };\n\n  const isValidInput = () => {\n    if (!topicInput.trim()) {\n      alert(\"Please enter a topic\");\n      return false;\n    }\n\n    if (!limitInput.trim() || isNaN(limitInput.trim()) || parseInt(limitInput.trim(), 10) <= 0) {\n      alert(\"Please enter a valid limit for the number of results (MAX 1000)\");\n      return false;\n    }\n\n    if (startDateInput.trim() || endDateInput.trim()) {\n      if (!endDateInput.trim()) {\n        alert(\"Please enter an end date range\");\n        return false;\n      } else if (!startDateInput.trim()) {\n        alert(\"Please enter a start date range\");\n        return false;\n      } else if (new Date(startDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid start date (Ex: 1/01/2019)\");\n        return false;\n      } else if (new Date(endDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid end date (Ex: 5/01/2020)\");\n        return false;\n      } else if (new Date(startDateInput.trim()).getTime() >= new Date(endDateInput.trim()).getTime()) {\n        alert(\"Make sure the start date range is earlier than the end date range\");\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n\n    if (isValidInput()) {\n      setShowResults(true);\n      setQuery({\n        topic: topicInput.trim(),\n        limit: Math.min(1000, parseInt(limitInput.trim(), 10)),\n        startDate: startDateInput.trim(),\n        endDate: endDateInput.trim()\n      });\n    }\n\n    clearInput();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"arXived\")), /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"App-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, \"arXived\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitForm,\n    className: \"input-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"topic-search-bar\",\n    type: \"text\",\n    placeholder: \"Enter a topic of interest\",\n    value: topicInput,\n    onChange: updateTopic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"limit-input-bar\",\n    type: \"text\",\n    placeholder: \"Result Limit (MAX 1000)\",\n    value: limitInput,\n    onChange: updateLimit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"date-input-bar\",\n    type: \"text\",\n    placeholder: \"1/01/2019 (Optional Start Range)\",\n    value: startDateInput,\n    onChange: updateStartDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"date-input-bar\",\n    type: \"text\",\n    placeholder: \"5/01/2020 (Optional End Range)\",\n    value: endDateInput,\n    onChange: updateEndDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"submit-button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, \"Scrape arXiv\"), showResults ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"download-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CSVLink, {\n    data: csvData,\n    filename: \"data.csv\",\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 27\n    }\n  }, \" Download CSV \")) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"entries\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, showResults ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      'textAlign': 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 27\n    }\n  }, \"Top matches for \\\"\", query.topic, \"\\\"\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 27\n    }\n  }, \"Download as CSV for the full results.\")) : null, entries.slice(0, Math.min(20, entries.length)).map((data, i) => /*#__PURE__*/React.createElement(Entry, {\n    key: i,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/shukan/Google Drive/Personal Projects/arxived/src/App.js"],"names":["React","useEffect","useState","Helmet","CSVLink","CSVDownload","Entry","App","csvData","entries","setEntries","topicInput","setTopicInput","limitInput","setLimitInput","startDateInput","setStartDateInput","endDateInput","setEndDateInput","showResults","setShowResults","query","setQuery","topic","limit","startDate","endDate","scrapeArXiv","response","fetch","responseString","text","results","window","DOMParser","parseFromString","querySelectorAll","data","i","length","metadata","csvRow","querySelector","textContent","trim","getAttribute","authors","names","j","push","join","console","log","updateTopic","e","target","value","updateLimit","updateStartDate","updateEndDate","clearInput","isValidInput","alert","isNaN","parseInt","Date","getTime","submitForm","preventDefault","Math","min","slice","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport {CSVLink, CSVDownload} from 'react-csv';\nimport Entry from './Entry.js';\nimport './App.css';\n\nconst App = () => {\n\n  var csvData = [];\n  const [entries, setEntries] = useState([]);\n  const [topicInput, setTopicInput] = useState('');\n  const [limitInput, setLimitInput] = useState('');\n  const [startDateInput, setStartDateInput] = useState('');\n  const [endDateInput, setEndDateInput] = useState('');\n  const [showResults, setShowResults] = useState(false);\n\n  const [query, setQuery] = useState({\n    topic: topicInput,\n    limit: '0',\n    startDate: startDateInput,\n    endDate: endDateInput\n  });\n\n\n  useEffect(() => {\n    scrapeArXiv();\n  }, [query]);\n\n  const scrapeArXiv = async () => {\n    const response = await fetch(`http://export.arxiv.org/api/query?search_query=all:\"${query.topic}\"&sortBy=submittedDate&sortOrder=descending&max_results=${query.limit}`);\n    const responseString = await response.text();\n    const results = (new window.DOMParser()).parseFromString(responseString, \"text/xml\").querySelectorAll('entry');\n    var data = []\n    csvData = [['title', 'published', 'authors', 'summary', 'link']]\n\n    for (var i = 0; i < results.length; i++) {\n      var metadata = {}\n      var csvRow = []\n\n      metadata['title'] = results[i].querySelector('title').textContent.trim();\n      metadata['published'] = results[i].querySelector('published').textContent.trim();\n      metadata['summary'] = results[i].querySelector('summary').textContent.trim();\n      metadata['link'] = results[i].querySelectorAll('link')[1].getAttribute('href').trim();\n\n      const authors = results[i].querySelectorAll('author');\n      var names = [];\n      for (var j = 0; j < authors.length; j++) {\n        names.push(authors[j].textContent.trim());\n      }\n      metadata['authors'] = names;\n      csvData.push(metadata['title'], metadata['published'], metadata['authors'].join(', '), \n                      metadata['summary'], metadata['link']);\n      data.push(metadata);\n    }\n\n    console.log('Scraped ' + data.length + ' entries');\n    console.log(csvData);\n    setEntries(data);\n  }\n\n\n  const updateTopic = e => {\n    setTopicInput(e.target.value);\n  }\n\n  const updateLimit = e => {\n    setLimitInput(e.target.value);\n  }\n\n  const updateStartDate = e => {\n    setStartDateInput(e.target.value);\n  }\n\n  const updateEndDate = e => {\n    setEndDateInput(e.target.value);\n  }\n\n  const clearInput = () => {\n    setTopicInput('');\n    setLimitInput('');\n    setStartDateInput('');\n    setEndDateInput('');\n  }\n\n  const isValidInput = () => {\n    if (!topicInput.trim()) {\n      alert(\"Please enter a topic\");\n      return false;\n    }\n\n    if (!limitInput.trim() || isNaN(limitInput.trim()) || parseInt(limitInput.trim(), 10) <= 0) {\n      alert(\"Please enter a valid limit for the number of results (MAX 1000)\");\n      return false;\n    }\n\n    if (startDateInput.trim() || endDateInput.trim()) {\n      if (!endDateInput.trim()) {\n        alert(\"Please enter an end date range\");\n        return false;\n      } else if (!startDateInput.trim()) {\n        alert(\"Please enter a start date range\");\n        return false;\n      } else if (new Date(startDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid start date (Ex: 1/01/2019)\");\n        return false;\n      } else if (new Date(endDateInput.trim()) == 'Invalid Date') {\n        alert(\"Please enter a valid end date (Ex: 5/01/2020)\");\n        return false;\n      } else if (new Date(startDateInput.trim()).getTime() >= new Date(endDateInput.trim()).getTime()) {\n        alert(\"Make sure the start date range is earlier than the end date range\");\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  const submitForm = e => {\n    e.preventDefault();\n    if (isValidInput()) {\n      setShowResults(true);\n      setQuery({\n        topic: topicInput.trim(),\n        limit: Math.min(1000, parseInt(limitInput.trim(), 10)),\n        startDate: startDateInput.trim(),\n        endDate: endDateInput.trim()\n      });\n    }\n    clearInput();\n  }\n  \n  return (\n    <div className='App'>\n      <Helmet>\n        <title>{\"arXived\"}</title>\n      </Helmet>\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">arXived</h1>\n      </header>\n\n      <form onSubmit={submitForm} className=\"input-form\" >\n\n        <input className=\"topic-search-bar\" type=\"text\" placeholder=\"Enter a topic of interest\"\n          value={topicInput} onChange={updateTopic} />\n        <input className=\"limit-input-bar\" type=\"text\" placeholder=\"Result Limit (MAX 1000)\"\n          value={limitInput} onChange={updateLimit} />\n        <input className=\"date-input-bar\" type=\"text\" placeholder=\"1/01/2019 (Optional Start Range)\"\n          value={startDateInput} onChange={updateStartDate} />\n        <input className=\"date-input-bar\" type=\"text\" placeholder=\"5/01/2020 (Optional End Range)\"\n          value={endDateInput} onChange={updateEndDate} />\n\n        <button className=\"submit-button\" type=\"submit\">\n          Scrape arXiv\n        </button>\n        {showResults ?  <button className=\"download-button\">\n                          <CSVLink data={csvData} filename=\"data.csv\" target=\"_blank\"> Download CSV </CSVLink>\n                        </button> : null }\n      </form>\n\n      <div className='entries'>\n        {showResults ? <div style={{ 'textAlign': 'center' }}>\n                          <h1>Top matches for \"{query.topic}\"</h1>\n                          <p>Download as CSV for the full results.</p>\n                        </div> : null }\n        {entries.slice(0, Math.min(20, entries.length)).map((data, i) => (\n          <Entry key={i} data={data} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}